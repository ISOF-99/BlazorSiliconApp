@page "/contact"
@using System.ComponentModel.DataAnnotations

@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation
@inject HttpClient Http
@rendermode InteractiveServer

<PageTitle>Contact</PageTitle>

<EditForm Model="@Input" OnValidSubmit="OnValidSubmitAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="name">Name</label>
        <InputText id="name" class=" input-group" @bind-Value="Input.Name" />
        <ValidationMessage For="() => Input.Name" />
    </div>

    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" class=" input-group" @bind-Value="Input.Email" />
        <ValidationMessage For="() => Input.Email" />
    </div>

    <div class="form-group">
        <label for="service">Service</label>
        <InputSelect id="service" class="form-control" @bind-Value="Input.Service">
            <option value="">Choose the service you are interested in</option>
            <option value="1">Product</option>
            <option value="2">Course</option>
            <option value="3">Other</option>
        </InputSelect>
        <ValidationMessage For="() => Input.Service" />
    </div>

    <div class="form-group">
        <label for="message">Message</label>
        <InputTextArea id="message" class="form-control" @bind-Value="Input.Message" />
        <ValidationMessage For="() => Input.Message" />
    </div>

    <button type="submit" class="btn-theme-s">Send</button>
    <div class="about-us">
        <h2 >Where to find us </h2>
        <iframe src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d2036.945622268904!2d15.12940887757328!3d59.30046537460032!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x465c6ae91468a57f%3A0x6db223d156828660!2sRullstensbacken%2011%2C%20703%2053%20%C3%96rebro!5e0!3m2!1sen!2sse!4v1716924472767!5m2!1sen!2sse" width="1000" border="5px solid " padding-top="100px" height="600" style="border:0;" allowfullscreen="" loading="lazy" referrerpolicy="no-referrer-when-downgrade"></iframe>
    </div>

</EditForm>

@if (!string.IsNullOrEmpty(StatusMessage)) 
{
    <div class="alert alert-success">@StatusMessage</div>
}

@code {
    private string? StatusMessage { get; set; }
    private ContactModel Input { get; set; } = new();

    public async Task OnValidSubmitAsync()
    {
        try
        {
            var response = await Http.PostAsJsonAsync(Environment.GetEnvironmentVariable("Contact_Request_API"), Input);

            if (response.IsSuccessStatusCode)
            {
                StatusMessage = "A contact request was sent!";
                Input = new ContactModel();
            }
            else
            {
                StatusMessage = "Failed to send contact request.";
            }
        }
        catch (Exception ex)
        {
            StatusMessage = $"An error occurred: {ex.Message}";
        }
    }

    private sealed class ContactModel
    {
        [Required(ErrorMessage = "Please enter your name.")]
        [Display(Name = "Name", Order = 0)]
        [MinLength(2, ErrorMessage = "You must enter a valid name")]
        public string Name { get; set; } = string.Empty;

        [Required(ErrorMessage = "Please enter your email address.")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address.")]
        [RegularExpression(@"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$", ErrorMessage = "Invalid email address")]
        [Display(Name = "Email", Order = 1)]
        public string Email { get; set; } = string.Empty;

        [Display(Name = "Service", Order = 2)]
        public int? Service { get; set; }

        [Display(Name = "Message", Order = 3)]
        [Required(ErrorMessage = "Please enter a message.")]
        [MinLength(10, ErrorMessage = "Message should be at least 10 characters long")]
        public string Message { get; set; } = string.Empty;
    }
}

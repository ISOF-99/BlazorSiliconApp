
@using Microsoft.AspNetCore.Identity
@using BlazorSiliconApp.Data
@using System.Net.Http
@using System.Net.Http.Headers
@using System.Threading.Tasks
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject HttpClient Http
@using Microsoft.AspNetCore.Components


<h3>Profile Avatar</h3>

@if (user != null)
{
    <section class="account-profile">
        <div class="profile">
            <div class="profile-image">
                <img src="/images/uploads/profiles/@user.ProfileImage" alt="@user.FirstName @user.LastName" />
                <EditForm  OnValidSubmit="HandleProfileUpload">
                    <InputFile id="fileUploader" OnChange="HandleFileSelected" />
                    <label for="fileUploader" class="btn btn-circle btn-sm">
                        <i class="fa-regular fa-refresh"></i>
                    </label>
                </EditForm>
            </div>
            <div class="profile-info">
                <h3 class="displayname">@user.FirstName @user.LastName</h3>
                <p>@user.Email</p>
            </div>
        </div>
    </section>
}
else
{
    <p>Loading...</p>
}

@code {
    private ApplicationUser user = default!;
    private IBrowserFile? selectedFile;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }

    private async Task HandleProfileUpload()
    {
        if (selectedFile == null)
        {
            
            return;
        }

        try
        {
            var content = new MultipartFormDataContent();
            var fileContent = new StreamContent(selectedFile.OpenReadStream(maxAllowedSize: 1024 * 1024 * 10)); // Set max allowed size to 10MB
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(selectedFile.ContentType);
            content.Add(fileContent, "file", selectedFile.Name);

            var response = await Http.PostAsync("http://fileprovider-win23jsbackand.azurewebsites.net/api/upload?container=profiles", content);

            if (response.IsSuccessStatusCode)
            {
                var fileUrl = await response.Content.ReadAsStringAsync();
                if (user != null)
                {
                    user.ProfileImage = fileUrl;

                    var updateResult = await UserManager.UpdateAsync(user);
                    if (updateResult.Succeeded)
                    {
                        
                        await RefreshUserData();
                        StateHasChanged();
                    }
                    else
                    {
                     
                        Console.WriteLine("Failed to update user profile image.");
                    }
                }
            }
            else
            {
             
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error uploading file: {response.StatusCode}, {errorContent}");
            }
        }
        catch (Exception ex)
        {
           
            Console.WriteLine($"Exception occurred: {ex.Message}");
        }
    }

    private async Task RefreshUserData()
    {
    
        var updatedUser = await UserManager.FindByIdAsync(user.Id);
        if (updatedUser != null)
        {
            user = updatedUser;
        }
    }
}
